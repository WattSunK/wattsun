#!/bin/bash
# ============================================================
# üöÄ promote_to_qa.sh ‚Äî Full Dev ‚Üí QA Promotion Cycle
# ------------------------------------------------------------
# 1Ô∏è‚É£ Sync latest code from GitHub main
# 2Ô∏è‚É£ Copy Dev DB ‚Üí QA DB
# 3Ô∏è‚É£ Run loyalty_reset.sh qa (cleanup + reseed)
# 4Ô∏è‚É£ Restart QA backend and verify health
# ============================================================

set -e
# ----------------------------------------------------------------------
# üß© SAFEGUARD: verify source vs target database versions before overwrite
# ----------------------------------------------------------------------
check_db_safety() {
  local SRC="$1"
  local DST="$2"
  local src_ver dst_ver src_date dst_date

  if [ ! -f "$SRC" ]; then
    echo "‚ùå Source DB not found: $SRC"
    exit 1
  fi
  if [ ! -f "$DST" ]; then
    echo "‚ö†Ô∏è Target DB does not exist yet: $DST (first-time copy allowed)"
    return 0
  fi

  src_ver=$(sqlite3 "$SRC" "PRAGMA user_version;" 2>/dev/null || echo 0)
  dst_ver=$(sqlite3 "$DST" "PRAGMA user_version;" 2>/dev/null || echo 0)
  src_date=$(stat -c %y "$SRC" 2>/dev/null | cut -d'.' -f1)
  dst_date=$(stat -c %y "$DST" 2>/dev/null | cut -d'.' -f1)

  echo "üîç Source: $SRC (user_version=$src_ver, modified=$src_date)"
  echo "üîç Target: $DST (user_version=$dst_ver, modified=$dst_date)"

  if [ "$src_ver" -lt "$dst_ver" ]; then
    echo "‚ùå Aborting: source DB user_version ($src_ver) is older than target ($dst_ver)."
    exit 1
  fi
}


ROOT="/volume1/web/wattsun"
DEV_DB="$ROOT/data/dev/wattsun.dev.db"
QA_DB="$ROOT/data/qa/wattsun.qa.db"

GREEN='\033[1;32m'
RED='\033[1;31m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
NC='\033[0m'

echo -e "${CYAN}============================================================"
echo -e "üöÄ  WattSun ‚Äî Promote Dev ‚Üí QA"
echo -e "============================================================${NC}"

# --- Step 1Ô∏è‚É£: Git Sync ---
echo -e "${YELLOW}üß© Pulling latest code from GitHub main...${NC}"
cd "$ROOT" || exit 1
if [ -d .git ]; then
  sudo -u 53Bret git fetch --all
  sudo -u 53Bret git reset --hard origin/main
  CURRENT_SHA=$(git rev-parse --short HEAD)
  echo -e "${GREEN}‚úÖ Code synced to commit: ${CURRENT_SHA}${NC}"
else
  echo -e "${RED}‚ùå Git repository not found at $ROOT${NC}"
  exit 1
fi

# --- Step 2Ô∏è‚É£: Copy Dev ‚Üí QA database ---
echo -e "${YELLOW}üì¶ Copying DEV ‚Üí QA database ...${NC}"
if [ ! -f "$DEV_DB" ]; then
  echo -e "${RED}‚ùå DEV DB not found at $DEV_DB${NC}"
  exit 1
fi
if [ ! -f "$QA_DB" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  QA DB not found ‚Äî it will be created fresh.${NC}"
else
  # üß© Backup QA DB before overwrite
  BACKUP_FILE="${QA_DB}.bak_$(date +%F_%H-%M-%S)"
  echo -e "${YELLOW}üóÑÔ∏è  Creating backup: ${BACKUP_FILE}${NC}"
  sudo cp "$QA_DB" "$BACKUP_FILE"
  sudo chown 53Bret:users "$BACKUP_FILE"
fi

# üß© Safeguard: ensure source DB is not older than target
check_db_safety "$DEV_DB" "$QA_DB"

# ‚úÖ Safe copy after checks
sudo cp "$DEV_DB" "$QA_DB"
sudo chown 53Bret:users "$QA_DB"
sudo chmod 664 "$QA_DB"
echo -e "${GREEN}‚úÖ QA database replaced from DEV baseline.${NC}"


# --- Step 3Ô∏è‚É£: Run loyalty reset for QA ---
if [ ! -x "$ROOT/scripts/loyalty_reset.sh" ]; then
  echo -e "${RED}‚ùå loyalty_reset.sh not found or not executable.${NC}"
  exit 1
fi
echo -e "${YELLOW}üßπ Running loyalty_reset.sh qa ...${NC}"
sudo --preserve-env=DB,admin_id bash "$ROOT/scripts/loyalty_reset.sh" qa <<<'y'
echo -e "${GREEN}‚úÖ QA loyalty tables cleaned and reseeded.${NC}"

# --- Step 4Ô∏è‚É£: Restart QA backend ---
echo -e "${YELLOW}üöÄ Restarting QA backend ...${NC}"
export NODE_ENV=qa
export DB_PATH_USERS="$QA_DB"
export SQLITE_DB="$QA_DB"
export DB_PATH_INVENTORY="$ROOT/data/qa/inventory.qa.db"

export SQLITE_MAIN="$QA_DB"
sudo bash "$ROOT/scripts/start_qa.sh"
sleep 5

# --- Step 5Ô∏è‚É£: Verify Health ---
echo -e "${YELLOW}üîç Checking QA API health...${NC}"
STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/api/health || true)
if [ "$STATUS" = "200" ]; then
  echo -e "${GREEN}‚úÖ QA /api/health OK ‚Äî environment live.${NC}"
else
  echo -e "${RED}‚ùå QA health check failed (HTTP ${STATUS}).${NC}"
  exit 1
fi

# --- Optional: Cross-verify both environments ---
if [ -x "$ROOT/scripts/qa_sync_verify.sh" ]; then
  echo -e "${CYAN}üîÅ Running qa_sync_verify.sh for double-check...${NC}"
  sudo bash "$ROOT/scripts/qa_sync_verify.sh"
fi

echo -e "${GREEN}============================================================"
echo -e "üéØ Dev ‚Üí QA Promotion complete."
echo -e "Commit: ${CURRENT_SHA}"
echo -e "QA DB:  $QA_DB"
echo -e "============================================================${NC}"
